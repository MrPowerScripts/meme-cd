workflows:
  version: 2
  deploy_meme:
    jobs:
      - build:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /.*/

version: 2
jobs:
  build:
    docker:
      - image: circleci/python:2.7-stretch
    environment:
      - TITLE: "Stackoverflow logo always makes me hungry"
      - SUBREDDIT: "programmerhumor"
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
      - run:
          name: install dependencies
          command: |
            virtualenv venv
            . venv/bin/activate
            pip install -r requirements.txt
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}
      - run: echo "${CIRCLE_COMPARE_URL%/*/*}/tree/${CIRCLE_TAG}/meme.png" > MEME_URL
      - run:
          name: Meme Time
          shell: ./venv/bin/python
          command: |
            import os, datetime
            import imghdr
            import praw
            from PIL import Image
            from imgurpython import ImgurClient

            image_path = os.path.join(os.getcwd(), 'meme.png')
            image = Image.open(image_path)
            image_width = image.size[0]
            image_height = image.size[1]

            if not imghdr.what(image_path) in ['png', 'jpeg']:
              raise Exception('Not a valid image type (png or jpeg)')

            if image_width < 500:
              raise Exception('What is this a meme for ants? Width too small')

            if image_width > 1000:
              raise Exception('Image width is too large!')

            if image_height < 500:
              raise Exception('What is this a meme for ants? Height is too small')

            if image_height > 1000:
              raise Exception('Image height is too large!')

            imgur = ImgurClient(os.environ['IMGUR_CLIENT_ID'],
                                  os.environ['IMGUR_CLIENT_SECRET'])

            reddit = praw.Reddit(client_id=os.environ['REDDIT_CLIENT_ID'],
                                 client_secret=os.environ['REDDIT_CLIENT_SECRET'],
                                 user_agent='meme-cd',
                                 username=os.environ['REDDIT_USERNAME'],
                                 password=os.environ['REDDIT_PASSWORD'])

            imgur_config = {
              'name':  'Meme',
              'title': os.environ['TITLE'],
              'description': 'My meme uploaded on {0}'.format(datetime.datetime.now())
            }

            try:
              imgur_response = imgur.upload_from_path(image_path,
                config=imgur_config, anon=False)
            except Exception as e:
              raise e

            post_config = {
              'title': os.environ['TITLE'],
              'resubmit': True,
              'url': imgur_response['link']
            }

            with open('MEME_URL', 'r') as meme_url_file:
              meme_url=meme_url_file.read()

            try:
              post = reddit.subreddit(os.environ['SUBREDDIT']).submit(**post_config)
              post.reply("""
              This meme was delivered fresh with [continuous meme delivery](https://github.com/mrpowerscripts/meme-cd)

              [View this Meme on GitHub]({meme_url})
              """.format(meme_url=meme_url))
            except Exception as e:
              raise e
